@page "/product"
@page "/product/{id:int}"
@inject IProductService ProductService



@if (Id == null)
{
	<PageTitle>Create a new Product</PageTitle>
	<h3>Create a new Product</h3>
}
else
{
	<PageTitle>Edit @product.Title </PageTitle>
	<h3>Edit @product.Title </h3>

}

<EditForm Model="product" OnSubmit="HandleSubmit">
	<div>
		<label for="title">Title</label>
		<InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
	</div>
	<div>
		<label for="description">Description</label>
		<InputText id="description" @bind-Value="product.Description" class="form-control"></InputText>
	</div>
	<div>
		<label for="price">Price</label>
		<InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
	</div>
	<div>
		<label for="category">Category</label>
		<InputSelect @bind-Value="product.CategoryId" class="form-select">
			@foreach (var category in ProductService.Categories)
		{
			<option value="@category.Id">@category.Name</option>
		}
		</InputSelect>
	</div>
	<br />
	<button type="submit" class="btn btn-primary">@btnText</button>
	<button type="button" class="btn btn-danger" @onclick="DeleteProduct"> Delete Product</button>

</EditForm>



@code {
	[Parameter]
	public int? Id { get; set; }

	string btnText = string.Empty;
	Product product = new Product { Category = new Category()};

	protected override async Task OnInitializedAsync()
	{
		btnText = Id == null ? "Save Product" : "Update product";
		await ProductService.GetCategories();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id == null)
		{
			product.Category = ProductService.Categories[0];
			product.CategoryId = product.Category.Id;
		}
		else
		{
			product = await ProductService.GetOneProduct((int)Id);
		}
	}
	async Task HandleSubmit()
	{
		if (Id == null)
		{
			await ProductService.CreateProduct(product);

		}
		else
		{
			await ProductService.UpdateProduct(product);
		}
	}
	async Task DeleteProduct()
	{
		await ProductService.DeleteProduct(product.Id);
	}
}